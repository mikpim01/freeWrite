import sys, dbm
from PyQt5 import QtWidgets
from PyQt5.QtCore import QDate
# MainWindow.py generated by QtDesigner
from fWlayout import Ui_MainWindow 

# BEGIN CONFIG 
# TODO: Use config file module...
dbfilename = "freeWrite.db" 
dailygoal = 500 # TODO Front-end in words /\ Back-end in bytes 
debug = True
# END CONFIG

# BEGIN MAIN WINDOW 
# TODO  [ ] Context menu on main window 
#       `-->[ ] Slots for metadata (tagging) subsystem...
#          >[ ] Slot to open log stats child window...
class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    
    # BEGIN Constructor
    def __init__(self, *args, obj=None, **kwargs):
        
        # As a parent to Ui_MainWindow object, setupUi on self
        super(MainWindow, self).__init__(*args, **kwargs)
        self.setupUi(self)
        
        # Pre-signal Staging 
        self.Today = QDate.currentDate() # Today initialized as QDate...
        self.calendarWidget.setMaximumDate(self.Today) #...to set max date...
        self.Today = self.Today.toString() #...then convert to string.
        print("Today is " + self.Today)
        self.progressBar.setMinimum(0)
        self.progressBar.setMaximum(dailygoal)
        self.readDate() #read Today to initialize widgets
        
        # BEGIN SIGNALS
        # If the date selection changes, update widgets
        self.calendarWidget.selectionChanged.connect(self.readDate)
        # If return is pressed in the line editor, write to db
        self.lineEdit.returnPressed.connect(self.appendEntry)
        
        # END SIGNALS

    # END Constructor
    
    # BEGIN SLOTS
    # Update text browser and progress bar 
    def readDate(self): 
        selDate = self.calendarWidget.selectedDate().toString()
        if(debug): print("Read: " + selDate)
        selText = ""
        with dbm.open(dbfilename,'c') as db:
            try: selText = db[selDate]
            except: selText = b""
            finally: 
                self.textBrowser.setPlainText(str(selText,'utf-8'))
                if(len(selText) < dailygoal):
                    self.progressBar.setValue(len(selText))
                else:
                    self.progressBar.setValue(dailygoal)
    # Write to db (or not) then readDate(self)
    def appendEntry(self):
        selDate = self.calendarWidget.selectedDate().toString()
        if(selDate in self.Today):
            if(debug): print("Write: " + selDate)
            addText = self.lineEdit.text()
            with dbm.open(dbfilename,'c') as db:
                try: db[selDate] = db[selDate] + bytes(addText,'utf-8') + b"\n"
                except: db[selDate] = bytes(addText,'utf-8') + b"\n"
                finally: self.lineEdit.clear()
            self.readDate()
        elif(debug): 
            print("Prohibited: " + selDate + " is not Today " + self.Today)
        else: pass

    # END SLOTS

# END MAIN WINDOW
